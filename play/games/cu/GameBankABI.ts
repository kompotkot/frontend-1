/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DiamondCut = ContractEventLog<{
  _diamondCut: [string, string, string[]][];
  _init: string;
  _calldata: string;
  0: [string, string, string[]][];
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type KeystoneUnlocked = ContractEventLog<{
  playerWallet: string;
  poolId: string;
  amount: string;
  roundTripId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LootBoxStashed = ContractEventLog<{
  player: string;
  token: string;
  roundTripId: string;
  poolId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Stashed = ContractEventLog<{
  player: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type StashedMultiple = ContractEventLog<{
  player: string;
  tokenAddresses: string[];
  tokenAmounts: string[];
  0: string;
  1: string[];
  2: string[];
}>;
export type Unstashed = ContractEventLog<{
  player: string;
  token: string;
  requestId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UnstashedMultiple = ContractEventLog<{
  player: string;
  requestId: string;
  tokenAddresses: string[];
  tokenAmounts: string[];
  0: string;
  1: string;
  2: string[];
  3: string[];
}>;
export type ApprovalForAll = ContractEventLog<{
  account: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type TransferBatch = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  ids: string[];
  values: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
}>;
export type TransferSingle = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  id: string;
  value: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type URI = ContractEventLog<{
  value: string;
  id: string;
  0: string;
  1: string;
}>;
export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type ControlTransferred = ContractEventLog<{
  previousController: string;
  newController: string;
  0: string;
  1: string;
}>;
export type PoolControlTransferred = ContractEventLog<{
  poolID: string;
  previousController: string;
  newController: string;
  0: string;
  1: string;
  2: string;
}>;
export type PoolMintBatch = ContractEventLog<{
  id: string;
  operator: string;
  from: string;
  toAddresses: string[];
  amounts: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
}>;

export interface GameBankABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GameBankABI;
  clone(): GameBankABI;
  methods: {
    facetAddress(
      _functionSelector: string | number[]
    ): NonPayableTransactionObject<string>;

    facetAddresses(): NonPayableTransactionObject<string[]>;

    facetFunctionSelectors(
      _facet: string
    ): NonPayableTransactionObject<string[]>;

    facets(): NonPayableTransactionObject<[string, string[]][]>;

    "supportsInterface(bytes4)"(
      _interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    "owner()"(): NonPayableTransactionObject<string>;

    "owner()"(): NonPayableTransactionObject<string>;

    "transferOwnership(address)"(
      _newOwner: string
    ): NonPayableTransactionObject<void>;

    "transferOwnership(address)"(
      newOwner: string
    ): NonPayableTransactionObject<void>;

    UnlockKeystoneFromGameGenerateMessageHash(
      poolId: number | string | BN,
      amount: number | string | BN,
      roundTripId: number | string | BN,
      bundleId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    UnlockKeystoneFromGameWithSignature(
      poolId: number | string | BN,
      amount: number | string | BN,
      roundTripId: number | string | BN,
      bundleId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    stashLootBoxGenerateMessageHash(
      player: string,
      poolId: number | string | BN,
      amount: number | string | BN,
      roundTripId: number | string | BN,
      bundleId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    stashLootBoxWithSignature(
      poolId: number | string | BN,
      amount: number | string | BN,
      roundTripId: number | string | BN,
      bundleId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    getGameServer(): NonPayableTransactionObject<string>;

    getRBWAddress(): NonPayableTransactionObject<string>;

    getUNIMAddress(): NonPayableTransactionObject<string>;

    stashRBW(amount: number | string | BN): NonPayableTransactionObject<void>;

    stashUNIM(amount: number | string | BN): NonPayableTransactionObject<void>;

    stashUNIMAndRBW(
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN
    ): NonPayableTransactionObject<void>;

    unstashRBWGenerateMessageHash(
      player: string,
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashRBWWithSignature(
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    unstashUNIMAndRBWGenerateMessageHash(
      player: string,
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashUNIMAndRBWWithSignature(
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    unstashUNIMGenerateMessageHash(
      player: string,
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashUNIMWithSignature(
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    init(
      _UNIMAddress: string,
      _RBWAddress: string
    ): NonPayableTransactionObject<void>;

    initializerRBWAddress(): NonPayableTransactionObject<string>;

    initializerUNIMAddress(): NonPayableTransactionObject<string>;

    getTerminusTokenAddress(): NonPayableTransactionObject<string>;

    setTerminusTokenAddress(
      terminusTokenAddress: string
    ): NonPayableTransactionObject<void>;

    burnUNIM(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawRBW(
      receiver: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawUNIM(
      receiver: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    "balanceOf(address,uint256)"(
      account: string,
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    "balanceOf(address)"(account: string): NonPayableTransactionObject<string>;

    balanceOfBatch(
      accounts: string[],
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    isApprovedForAll(
      account: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: (number | string | BN)[],
      amounts: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: number | string | BN,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    "uri(uint256)"(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    "uri(uint256)"(
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    "uri(uint256)"(
      poolID: number | string | BN
    ): NonPayableTransactionObject<string>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: number | string | BN,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    "burn(uint256)"(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    "burn(address,uint256,uint256)"(
      from: string,
      poolID: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    burnBatch(
      account: string,
      ids: (number | string | BN)[],
      values: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    burnFrom(
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: (number | string | BN)[],
      values: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: number | string | BN,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    approveForPool(
      poolID: number | string | BN,
      operator: string
    ): NonPayableTransactionObject<void>;

    isApprovedForPool(
      poolID: number | string | BN,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    paymentToken(): NonPayableTransactionObject<string>;

    poolBasePrice(): NonPayableTransactionObject<string>;

    setPaymentToken(newPaymentToken: string): NonPayableTransactionObject<void>;

    terminusController(): NonPayableTransactionObject<string>;

    terminusPoolCapacity(
      poolID: number | string | BN
    ): NonPayableTransactionObject<string>;

    terminusPoolController(
      poolID: number | string | BN
    ): NonPayableTransactionObject<string>;

    terminusPoolSupply(
      poolID: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalPools(): NonPayableTransactionObject<string>;
  };
  events: {
    DiamondCut(cb?: Callback<DiamondCut>): EventEmitter;
    DiamondCut(options?: EventOptions, cb?: Callback<DiamondCut>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    KeystoneUnlocked(cb?: Callback<KeystoneUnlocked>): EventEmitter;
    KeystoneUnlocked(
      options?: EventOptions,
      cb?: Callback<KeystoneUnlocked>
    ): EventEmitter;

    LootBoxStashed(cb?: Callback<LootBoxStashed>): EventEmitter;
    LootBoxStashed(
      options?: EventOptions,
      cb?: Callback<LootBoxStashed>
    ): EventEmitter;

    Stashed(cb?: Callback<Stashed>): EventEmitter;
    Stashed(options?: EventOptions, cb?: Callback<Stashed>): EventEmitter;

    StashedMultiple(cb?: Callback<StashedMultiple>): EventEmitter;
    StashedMultiple(
      options?: EventOptions,
      cb?: Callback<StashedMultiple>
    ): EventEmitter;

    Unstashed(cb?: Callback<Unstashed>): EventEmitter;
    Unstashed(options?: EventOptions, cb?: Callback<Unstashed>): EventEmitter;

    UnstashedMultiple(cb?: Callback<UnstashedMultiple>): EventEmitter;
    UnstashedMultiple(
      options?: EventOptions,
      cb?: Callback<UnstashedMultiple>
    ): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    TransferBatch(cb?: Callback<TransferBatch>): EventEmitter;
    TransferBatch(
      options?: EventOptions,
      cb?: Callback<TransferBatch>
    ): EventEmitter;

    TransferSingle(cb?: Callback<TransferSingle>): EventEmitter;
    TransferSingle(
      options?: EventOptions,
      cb?: Callback<TransferSingle>
    ): EventEmitter;

    URI(cb?: Callback<URI>): EventEmitter;
    URI(options?: EventOptions, cb?: Callback<URI>): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    ControlTransferred(cb?: Callback<ControlTransferred>): EventEmitter;
    ControlTransferred(
      options?: EventOptions,
      cb?: Callback<ControlTransferred>
    ): EventEmitter;

    PoolControlTransferred(cb?: Callback<PoolControlTransferred>): EventEmitter;
    PoolControlTransferred(
      options?: EventOptions,
      cb?: Callback<PoolControlTransferred>
    ): EventEmitter;

    PoolMintBatch(cb?: Callback<PoolMintBatch>): EventEmitter;
    PoolMintBatch(
      options?: EventOptions,
      cb?: Callback<PoolMintBatch>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DiamondCut", cb: Callback<DiamondCut>): void;
  once(
    event: "DiamondCut",
    options: EventOptions,
    cb: Callback<DiamondCut>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "KeystoneUnlocked", cb: Callback<KeystoneUnlocked>): void;
  once(
    event: "KeystoneUnlocked",
    options: EventOptions,
    cb: Callback<KeystoneUnlocked>
  ): void;

  once(event: "LootBoxStashed", cb: Callback<LootBoxStashed>): void;
  once(
    event: "LootBoxStashed",
    options: EventOptions,
    cb: Callback<LootBoxStashed>
  ): void;

  once(event: "Stashed", cb: Callback<Stashed>): void;
  once(event: "Stashed", options: EventOptions, cb: Callback<Stashed>): void;

  once(event: "StashedMultiple", cb: Callback<StashedMultiple>): void;
  once(
    event: "StashedMultiple",
    options: EventOptions,
    cb: Callback<StashedMultiple>
  ): void;

  once(event: "Unstashed", cb: Callback<Unstashed>): void;
  once(
    event: "Unstashed",
    options: EventOptions,
    cb: Callback<Unstashed>
  ): void;

  once(event: "UnstashedMultiple", cb: Callback<UnstashedMultiple>): void;
  once(
    event: "UnstashedMultiple",
    options: EventOptions,
    cb: Callback<UnstashedMultiple>
  ): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "TransferBatch", cb: Callback<TransferBatch>): void;
  once(
    event: "TransferBatch",
    options: EventOptions,
    cb: Callback<TransferBatch>
  ): void;

  once(event: "TransferSingle", cb: Callback<TransferSingle>): void;
  once(
    event: "TransferSingle",
    options: EventOptions,
    cb: Callback<TransferSingle>
  ): void;

  once(event: "URI", cb: Callback<URI>): void;
  once(event: "URI", options: EventOptions, cb: Callback<URI>): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "ControlTransferred", cb: Callback<ControlTransferred>): void;
  once(
    event: "ControlTransferred",
    options: EventOptions,
    cb: Callback<ControlTransferred>
  ): void;

  once(
    event: "PoolControlTransferred",
    cb: Callback<PoolControlTransferred>
  ): void;
  once(
    event: "PoolControlTransferred",
    options: EventOptions,
    cb: Callback<PoolControlTransferred>
  ): void;

  once(event: "PoolMintBatch", cb: Callback<PoolMintBatch>): void;
  once(
    event: "PoolMintBatch",
    options: EventOptions,
    cb: Callback<PoolMintBatch>
  ): void;
}
