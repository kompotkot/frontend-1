/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Stashed = ContractEventLog<{
  player: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unstashed = ContractEventLog<{
  player: string;
  token: string;
  requestId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UnstashedMultiple = ContractEventLog<{
  player: string;
  requestId: string;
  tokenAddresses: string[];
  tokenAmounts: string[];
  0: string;
  1: string;
  2: string[];
  3: string[];
}>;

export interface StashABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StashABI;
  clone(): StashABI;
  methods: {
    getGameServer(): NonPayableTransactionObject<string>;

    getRBWAddress(): NonPayableTransactionObject<string>;

    getUNIMAddress(): NonPayableTransactionObject<string>;

    setGameServer(newGameServer: string): NonPayableTransactionObject<void>;

    stashRBW(amount: number | string | BN): NonPayableTransactionObject<void>;

    stashUNIM(amount: number | string | BN): NonPayableTransactionObject<void>;

    stashUNIMAndRBW(
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN
    ): NonPayableTransactionObject<void>;

    unstashRBWGenerateMessageHash(
      player: string,
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashRBWWithSignature(
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    unstashUNIMAndRBWGenerateMessageHash(
      player: string,
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashUNIMAndRBWWithSignature(
      amountUNIM: number | string | BN,
      amountRBW: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    unstashUNIMGenerateMessageHash(
      player: string,
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstashUNIMWithSignature(
      amount: number | string | BN,
      requestId: number | string | BN,
      blockDeadline: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Stashed(cb?: Callback<Stashed>): EventEmitter;
    Stashed(options?: EventOptions, cb?: Callback<Stashed>): EventEmitter;

    Unstashed(cb?: Callback<Unstashed>): EventEmitter;
    Unstashed(options?: EventOptions, cb?: Callback<Unstashed>): EventEmitter;

    UnstashedMultiple(cb?: Callback<UnstashedMultiple>): EventEmitter;
    UnstashedMultiple(
      options?: EventOptions,
      cb?: Callback<UnstashedMultiple>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Stashed", cb: Callback<Stashed>): void;
  once(event: "Stashed", options: EventOptions, cb: Callback<Stashed>): void;

  once(event: "Unstashed", cb: Callback<Unstashed>): void;
  once(
    event: "Unstashed",
    options: EventOptions,
    cb: Callback<Unstashed>
  ): void;

  once(event: "UnstashedMultiple", cb: Callback<UnstashedMultiple>): void;
  once(
    event: "UnstashedMultiple",
    options: EventOptions,
    cb: Callback<UnstashedMultiple>
  ): void;
}
